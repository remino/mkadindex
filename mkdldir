#!/bin/sh
# mkdldir

VERSION='1.0.0'

mkdldir_main() {
	trap _exit INT TERM

	e_args=16
	e_missing_app=17

	_require realpath

	scriptinv="$( basename "$0" )"
	scriptpath="$( realpath "$0" )"
	scriptname="$( basename "$scriptpath" )"

	htdigest_base=
	password=
	private=0
	realm=
	title=
	user="download"

	while getopts a:hip:r:t:u:v opt
	do
		case $opt in
			a) htdigest_base="$OPTARG" ;;
			h) cmd=help ;;
			i) private=1 ;;
			p) private=1; password="$OPTARG" ;;
			r) private=1; realm="$OPTARG" ;;
			t) title="$OPTARG" ;;
			u) private=1; user="$OPTARG" ;;
			v) cmd=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$(( OPTIND - 1 ))"

	[ $# -eq 0 ] && [ -z "$cmd" ] && cmd=help
	[ -z "$cmd" ] && cmd="process"

	case "$cmd" in
		help|process|version) "mkdldir_$cmd" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

mkdldir_help() {
cat <<USAGE
$scriptname $VERSION

USAGE: $scriptinv [-ahiprtuv] <outputdir>

Create download directory for Apache HTTP Server.

Directory will be created in <outputdir>. It can be protected using HTTP Digest
with a pair of .htdigest and .htaccess files.

OPTIONS:

	-a        Specify absolute path base to .htaccess file to use.
	          Path will become <pathbase>/<outputdir>/.htaccess.
	          If not specified, will only <outputdir>/.htaccess.
	          (Note AuthUserFile in .htaccess cannot be relative.)
	-h        Show this help screen.
	-i        Make directory private by protecting it with HTTP Digest auth.
	-p        Specify password for digest authentication. Implies -i.
	-r        Specify realm for digest authentication. Implies -i.
	          Will use title (-t) if not specified.
	-t        Specify title for directory. (Default: Download)
	-u        Specify username for digest password. Implies -i.
	          (Default: download)
	-v        Show script name and version number.

USAGE
}

mkdldir_process() {
	[ -z "$1" ] && _missing_arg "outputdir"

	[ -z "$title" ] && title="$1"
	[ -z "$realm" ] && realm="$title"
	[ -n "$htdigest_base" ] && htdigest_base="$htdigest_base/"
	[ -d "$1" ] || mkdir -p "$1"

	_htaccess > "$1/.htaccess"

	if [ $private -ne 0 ]
	then
		htdigest_file="$1/.htdigest"
		htdigest_path="${htdigest_base}$htdigest_file"

		_htdigest "$realm" "$user" "$password" > "$htdigest_file"
		_htaccess_private "$htdigest_path" "$realm" >> "$1/.htaccess"
	fi

	_css > "$1/_style.css"
	_html_header > "$1/_header.html"
	_html_footer > "$1/_footer.html"
}

mkdldir_version() {
	_echo "$scriptname $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_exit() {
	exit_code=$?
	exit $exit_code
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_htaccess() {
cat <<HTACCESS
IndexIgnore .. _footer.html _header.html _style.css
IndexOptions DescriptionWidth=* FancyIndexing FoldersFirst HTMLTable IconsAreLinks NameWidth=* SuppressHTMLPreamble Charset=UTF-8
IndexStyleSheet "_style.css"

HeaderName _header.html
ReadmeName _footer.html
HTACCESS
}

_htaccess_private() {
	[ -z "$1" ] && _missing_arg "htdigest_path"
	[ -z "$2" ] && _missing_arg "realm"

cat <<HTACCESS

AuthType Digest
AuthName "$2"
AuthUserFile "$1"
Require valid-user
HTACCESS
}

_css() {
cat <<CSS
:root {
	--bg-color: #fff;
	--fg-color: #000;
	--link-color: #00f;
	--link-color-visited: #00b;
	--link-color-hover: #00b;
	--link-color-active: #008;
	--max-width: 50rem;
}

a {
	color: var(--link-color);
	text-decoration: none;
}

a:hover {
	color: var(--link-color-hover);
	text-decoration: underline;
}

a:active {
	color: var(--link-color-active);
	text-decoration: underline;
}

a:visited {
	color: var(--link-color-visited);
	text-decoration: none;
}

body {
	background-color: var(--bg-color);
	color: var(--fg-color);
	font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
	font-size: 1em;
	line-height: 1.6;
	margin: 0;
	padding: 0;
}

h1 {
	font-size: 1.6em;
	margin: 2rem 0;
	padding: 0 2rem;
}

main {
	margin: 0 auto;
	max-width: var(--max-width);
}

table {
	border-collapse: collapse;
	margin: 0 0 2rem;
	max-width: var(--max-width);
	width: 100%;
}

td, td a, th, th a {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

td, th {
	max-width: 20rem;
	min-width: 10rem;
	padding: 0.25rem 0.5rem;
}

td.indexcolname a {
	display: block;
}

th {
	text-align: left;
}

th a {
	color: var(--fg-color);
	display: block;
}

.indexbreakrow {
	display: none;
}

.indexcoldesc,
.indexcolicon,
.indexcollastmod,
.indexcolsize {
	min-width: 0;
}

.indexcolicon,
.indexcollastmod,
.indexcolsize {
	width: max-content;
}

.indexhead {
	border-bottom: 1px solid var(--fg-color);
}

.table-container {
	box-sizing: border-box;
	overflow-x: auto;
	padding: 0 2rem;
}

@media (prefers-color-scheme: dark) {
	:root {
		--bg-color: #222;
		--fg-color: #fff;
		--link-color: #ccf;
		--link-color-visited: #99b;
		--link-color-hover: #99b;
		--link-color-active: #995;
	}
}
CSS
}

_htdigest() {
	password="$3"

	[ -z "$1" ] && _missing_arg "realm"
	[ -z "$2" ] && _missing_arg "user"

	if [ -z "$password" ]
	then
		password="$( _password )"
	fi

	digest="$(
		printf "%s:%s:%s" "$2" "$1" "$3" \
			| md5sum | awk '{print $1}'
	)"

	printf "%s:%s:%s\n" "$2" "$1" "$digest"
}

_html_footer() {
cat <<HTML
			</div>
		</main>
	</body>
</html>
HTML
}

_html_header() {
cat <<HTML
<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta charset="utf-8">
		<title>$title</title>
		<link rel="stylesheet" type="text/css" href="_style.css">
	</head>
	<body>
		<main>
			<h1>$title</h1>
			<div class="table-container">
HTML
}

_invalid_cmd() {
	_error "Invalid command: $cmd"
	_echo
	mkdldir_help
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $opt"
	_echo
	mkdldir_help
	exit $e_args
}

_missing_arg() {
	_fatal $e_args "Missing argument: $1. See '$scriptinv -h' for details."
}

_password() {
	# always read from the tty even when redirected:
	exec < /dev/tty || exit # || exit only needed for bash

	# save current tty settings:
	tty_settings=$(stty -g) || exit

	# schedule restore of the settings on exit of that subshell
	# or on receiving SIGINT or SIGTERM:
	trap 'stty "$tty_settings"' EXIT INT TERM

	# disable terminal local echo
	stty -echo || exit

	# prompt on tty
	printf "Password: " > /dev/tty

	# read password as one line, record exit status
	IFS= read -r password; ret=$?

	# display a newline to visually acknowledge the entered password
	echo > /dev/tty

	# return the password for $REPLY
	printf '%s\n' "$password"
	return "$ret"
}

_require() {
	missing_bin=0

	for bin in "$@"
	do
		if ! which "$bin" > /dev/null 2>&1
		then
			missing_bin=1
			_error "Required: $bin"
		fi
	done

	if [ $missing_bin -ne 0 ]
	then
		_fatal $e_missing_app "One or more executables or apps are missing."
	fi
}

mkdldir_main "$@"
